personal access token in file
/felps/home/Documents/Python/.git-credentials

$ it init
$ git add <file>
# or git add . to add all files
$ git commit -m "<message>"
$ git push

chosing where to push
# rememmber to create a new repository in github site
$ git remote add origin <url>
git push --set-upstream origin <branch name>

$ git reflog
# see log, most recent at top, to go back to a different  version, use
$ git reset --hard <id from reflog>
# it is not a good thing, always check your  superior

branches
$ git branch
# show branches available
$ git branch <name>
# create new branch, commom name: staging
$ git checkout <name>
# change actual branch

merge
# before merging, you need to make sure that your version of  master is up o date
# otherwise, you'll merge to an old version. So use the command
# remember that you need to enter in the branch that will receive content
$ git pull
$ git merge <branch with modification>
$ git push

creating a new branch based on another, usefull for team working
$ git checkout -b <new branch> <base branch>

pull request
# on github site, you see the new moddification, chose wich branches to merge
# click on pull request, waiting to somoene approve your pull request
# if you gotreject, update your file and make a new commit, no need to make a new pull request

git ignore
# make sure that a file wont be added to cloud
# create a file with tha names, each one in on line

Best Practices
$ git diff <file>
# shows what moddifications were made in this file, quit with :q
$ git stash
# discard all local changes,  but save for re-use later, with the following command
$ git stash pop
# apply the last and removes it
$ git stash list
$ git stash <number>

Undo a $ git add <file>
$ git reset HEAD <name>
$ git reset  -- <name>
$ git reset
# unstage everything

Undo a commit
$ git log
# first 7 chars
$ git revert <commit-id> <file name if is only one file>

$ git rebase -i
# change pick of the commit you want to change, and change it to edit
# change to drop to exclude
# "esc" :wq
$ git commit --amend
# now you can edit the commit message

# if you  just want to change the last commit massage, just run the  git commit --amend

#then
$ git rebase --continue

One branch per feature
Pulling from master
$ git rebase -i master
#then change pick for squash

